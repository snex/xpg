# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/invoices' do
  let!(:wallet) { create(:wallet) }
  # This should return the minimal set of attributes required to create a valid
  # Invoice. As you add validations to Invoice, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    { wallet_id: wallet.id, amount: 1, expires_at: 1.hour.from_now, external_id: 'ext_id' }
  end

  let(:invalid_attributes) do
    { wallet_id: '' }
  end

  describe 'GET /index' do
    before do
      Invoice.create! valid_attributes
      get invoices_url
    end

    it 'renders a successful response' do
      expect(response).to be_successful
    end

    it 'renders a response in the correct schema' do
      expect(response).to match_response_schema('invoices')
    end
  end

  describe 'GET /show' do
    before do
      invoice = Invoice.create! valid_attributes
      get invoice_url(invoice)
    end

    it 'renders a successful response' do
      expect(response).to be_successful
    end

    it 'renders a response in the correct schema' do
      expect(response).to match_response_schema('invoice')
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new Invoice' do
        expect do
          post invoices_url, params: { invoice: valid_attributes }
        end.to change(Invoice, :count).by(1)
      end

      it 'responds with the created invoice' do
        post invoices_url, params: { invoice: valid_attributes }
        expect(response).to match_response_schema('invoice')
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new Invoice' do
        expect do
          post invoices_url, params: { invoice: invalid_attributes }
        end.not_to change(Invoice, :count)
      end

      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post invoices_url, params: { invoice: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        { amount: 20 }
      end

      it 'updates the requested invoice' do
        invoice = Invoice.create! valid_attributes
        patch invoice_url(invoice), params: { invoice: new_attributes }
        invoice.reload
        expect(invoice.amount).to eq(20)
      end

      it 'renders the updated invoice' do
        invoice = Invoice.create! valid_attributes
        patch invoice_url(invoice), params: { invoice: new_attributes }
        invoice.reload
        expect(response).to match_response_schema('invoice')
      end
    end

    context 'with invalid parameters' do
      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        invoice = Invoice.create! valid_attributes
        patch invoice_url(invoice), params: { invoice: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested invoice' do
      invoice = Invoice.create! valid_attributes
      expect do
        delete invoice_url(invoice)
      end.to change(Invoice, :count).by(-1)
    end

    it 'redirects to the invoices list' do
      invoice = Invoice.create! valid_attributes
      delete invoice_url(invoice)
      expect(response).to have_http_status(:no_content)
    end
  end
end
